//
//  InitProjectViewController.swift
//  Improcess
//
//  Created by MuMhu on 21/10/2561 BE.
//  Copyright (c) 2561 Kittitat Boonkarn. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase

protocol InitProjectDisplayLogic: class
{
}

class InitProjectViewController: UIViewController, InitProjectDisplayLogic
{
    var interactor: InitProjectBusinessLogic?
    var router: (NSObjectProtocol & InitProjectRoutingLogic & InitProjectDataPassing)?
    var names = [String]()
    @IBOutlet weak var projectNameTextField: UITextField!
    @IBOutlet weak var projectDetailsTextField: UITextField!
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = InitProjectInteractor()
        let presenter = InitProjectPresenter()
        let router = InitProjectRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        loadOldProjectName()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    @IBAction func nextHandler(_ sender: Any) {
        if projectNameTextField.text == ""{
            let alert = UIAlertController(title: "Error", message: "Project name can't be empty!", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            self.present(alert, animated: true, completion: nil)
        }
        else{
            let uid = Auth.auth().currentUser?.uid
            let usersDB = Database.database().reference().child(uid!).child("project")
            var taken = false
            
            usersDB.observeSingleEvent(of: .value, with: { (snapshot) in
                if snapshot.hasChild(self.projectNameTextField.text ?? "") {
                    taken = true
                }
                if !taken {
                    self.interactor?.proJectName = self.projectNameTextField.text ?? ""
                    self.interactor?.proJectDetails = self.projectDetailsTextField.text ?? ""
                    self.router?.routeToNextPage(segue: nil)
                }
                else{
                    let alert = UIAlertController(title: "Error", message: "Project name already taken!", preferredStyle: .alert)
                    alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
                    self.present(alert, animated: true, completion: nil)
                }
            })
        }
    }
    
    func loadOldProjectName(){
        DispatchQueue.global().async {
            let uid = Auth.auth().currentUser?.uid
            Database.database().reference().child(uid!).child("project").observe(.childAdded, with: { (snapshot) in
                self.names.append(snapshot.key)
            })
        }
    }
}
