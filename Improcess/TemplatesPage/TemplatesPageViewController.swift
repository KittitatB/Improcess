//
//  TemplatesPageViewController.swift
//  Improcess
//
//  Created by MuMhu on 7/11/2561 BE.
//  Copyright (c) 2561 Kittitat Boonkarn. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol TemplatesPageDisplayLogic: class
{
    func displayTemplates(viewModel: TemplatesPage.Template.ViewModel)
}

class TemplatesPageViewController: UIViewController, TemplatesPageDisplayLogic, UITableViewDelegate, UITableViewDataSource
{
    var interactor: TemplatesPageBusinessLogic?
    var router: (NSObjectProtocol & TemplatesPageRoutingLogic & TemplatesPageDataPassing)?
    var templates = [TemplateForm]()
    var selectedTemplate: Int? = nil
    
    @IBOutlet weak var tableview: UITableView!
    @IBOutlet weak var tableviewHeight: NSLayoutConstraint!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = TemplatesPageInteractor()
        let presenter = TemplatesPagePresenter()
        let router = TemplatesPageRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tableviewHeight.constant = 0
        loadData()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func displayTemplates(viewModel: TemplatesPage.Template.ViewModel)
    {
        templates = viewModel.templates!
        tableviewHeight.constant = CGFloat(templates.count * 125)
        tableview.reloadData()
    }
    
    func loadData(){
        interactor?.requestTemplates()
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return templates.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "templatesCell", for: indexPath) as! TemplateCell
        cell.templateName.text = templates[indexPath.row].templateName
        cell.templateDetail.text = templates[indexPath.row].templateDetail
        let imageURL = URL(string: templates[indexPath.row].templateImagePath!)
        //        print(templates[indexPath.row].templateImagePath)
        cell.templateImage.kf.setImage(with: imageURL)
        //        print("downloaded?")
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 125
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cell = tableView.cellForRow(at: indexPath)
        if selectedTemplate != indexPath.row{
            selectedTemplate = indexPath.row
            cell?.layer.borderWidth = 2.0
            cell?.layer.borderColor = UIColor.init(red: 53/256, green: 146/256, blue: 245/256, alpha: 1).cgColor
            print("select")
        }
        else{
            selectedTemplate = nil
            cell?.layer.borderWidth = 0.0
            print("deselect")
        }
    }
    
    private func tableView(_ tableView: UITableView, willDeselectRowAt indexPath: IndexPath) {
        let cell = tableView.cellForRow(at: indexPath)
        cell?.layer.borderWidth = 0.0
        cell?.layer.borderColor = UIColor.black.cgColor
        
    }
    
    func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
        if let indexPathForSelectedRow = tableView.indexPathForSelectedRow,
            indexPathForSelectedRow == indexPath {
            tableView.deselectRow(at: indexPath, animated: false)
            return nil
        }
        return indexPath
    }
}
