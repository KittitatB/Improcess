//
//  TaskPageWorker.swift
//  Improcess
//
//  Created by MuMhu on 17/12/2561 BE.
//  Copyright (c) 2561 Kittitat Boonkarn. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FirebaseAuth
import FirebaseDatabase

class TaskPageWorker
{
    
    func requestPhraseFormFirebase(project: ProjectDetail, task: String,completionHandler: @escaping([PhraseList]) -> Void)
    {
        let uid = Auth.auth().currentUser?.uid
        var phrases = [PhraseList]()
        Database.database().reference().child(uid!).child("projects").child(project.name!).child("tasks").child(task).child("phrase").observeSingleEvent(of: .value) { (snapshot) in
            if let tasksDic = snapshot.value as? [String : AnyObject]{
                for task in tasksDic{
                    let dict = task.value as! [String: AnyObject]
                    let name = dict["phrase"] as! String
                    let comment = dict["comment"] as! String
                    let time = dict["time"] as! Int
                    let tempPhrase = PhraseList(name: name, timer: time, detail: comment)
                   phrases.append(tempPhrase)
                }
                completionHandler(phrases)
            }
        }
    }
    
    func requestEstimatedMetricFormFirebase(project: ProjectDetail, task: String,completionHandler: @escaping([PlanMetric]) -> Void)
    {
        let uid = Auth.auth().currentUser?.uid
        var metrics = [PlanMetric]()
        Database.database().reference().child(uid!).child("projects").child(project.name!).child("tasks").child(task).child("estimate").observeSingleEvent(of: .value) { (snapshot) in
            if let metricsDic = snapshot.value as? [String : AnyObject]{
                for metric in metricsDic{
                    let name = metric.key
                    let field = metric.value as! String
                    let temp = PlanMetric(name: name, value: field)
                    metrics.append(temp)
                }
                metrics = metrics.sorted(by: { (item1, item2) -> Bool in
                    return item1.name!.compare(item2.name!) == ComparisonResult.orderedAscending
                })
                completionHandler(metrics)
            }
        }
    }
    
    func requestActualMetricFormFirebase(project: ProjectDetail, task: String,completionHandler: @escaping([ActualMetric]) -> Void)
    {
        let uid = Auth.auth().currentUser?.uid
        var metrics = [ActualMetric]()
        Database.database().reference().child(uid!).child("projects").child(project.name!).child("tasks").child(task).child("actual").observeSingleEvent(of: .value) { (snapshot) in
            if let metricsDic = snapshot.value as? [String : AnyObject]{
                for metric in metricsDic{
                    let name = metric.key
                    let field = metric.value as! String
                    let temp = ActualMetric(name: name, value: field)
                    metrics.append(temp)
                }
                metrics = metrics.sorted(by: { (item1, item2) -> Bool in
                    return item1.name!.compare(item2.name!) == ComparisonResult.orderedAscending
                })
                completionHandler(metrics)
            }
        }
    }
    
    func requestDefectFormFirebase(project: ProjectDetail, task: String,completionHandler: @escaping([DefectList]) -> Void)
    {
        let uid = Auth.auth().currentUser?.uid
        var defects = [DefectList]()
        Database.database().reference().child(uid!).child("projects").child(project.name!).child("tasks").child(task).child("defect").observeSingleEvent(of: .value) { (snapshot) in
            if let tasksDic = snapshot.value as? [String : AnyObject]{
                for task in tasksDic{
                    let dict = task.value as! [String: AnyObject]
                    let name = dict["defect"] as! String
                    let comment = dict["comment"] as! String
                    let injected = dict["injected"] as! String
                    let removed = dict["removed"] as! String
                    let tempDefect = DefectList(name: name, injected: injected, removed: removed, detail: comment)
                    defects.append(tempDefect)
                }
                completionHandler(defects)
            }
        }
    }
    
    func updateTaskPhrase(project: ProjectDetail, task: String, projectPhrase: PhraseList)
    {
        let uid = Auth.auth().currentUser?.uid
        let phraseDetail = [
            "phrase" : projectPhrase.name!,
            "time" : projectPhrase.timer ?? 0,
            "comment" : projectPhrase.detail!
            ] as [String : Any]
        Database.database().reference().child(uid!).child("projects").child(project.name!).child("tasks").child(task).updateChildValues(["status": "WIP"] as [String : String])
        Database.database().reference().child(uid!).child("projects").child(project.name!).child("tasks").child(task).child("phrase").childByAutoId().updateChildValues(phraseDetail)
    }
    
    func updateTaskDefect(project: ProjectDetail, task: String, projectDefect: DefectList)
    {
        let uid = Auth.auth().currentUser?.uid
        let phraseDetail = [
            "defect" : projectDefect.name!,
            "injected" : projectDefect.injected!,
            "removed" : projectDefect.removed!,
            "comment" : projectDefect.detail!
            ] as [String : Any]
        Database.database().reference().child(uid!).child("projects").child(project.name!).child("tasks").child(task).child("defect").childByAutoId().updateChildValues(phraseDetail)
    }
    
    func finishUpTask(project: ProjectDetail, task: String, problem: String, improvement: String){
        let uid = Auth.auth().currentUser?.uid
        let pip = [
            "problem" : problem,
            "improvement proposal" : improvement,
            ] as [String : Any]
        Database.database().reference().child(uid!).child("projects").child(project.name!).child("tasks").child(task).updateChildValues(pip)
        Database.database().reference().child(uid!).child("projects").child(project.name!).child("tasks").child(task).updateChildValues(["status": "Close"] as [String : String])
    }
}
