//
//  TaskPageInteractor.swift
//  Improcess
//
//  Created by MuMhu on 17/12/2561 BE.
//  Copyright (c) 2561 Kittitat Boonkarn. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TaskPageBusinessLogic
{
    func loadDropDown()
    func loadPhrase()
    func loadDefect()
    func finishingUp(problem: String, improvement: String)
    func addPhrase(phrase: PhraseList)
    func addDefect(defect: DefectList)
}

protocol TaskPageDataStore
{
    var phraseList: [PhraseTypeList] {get set}
    var defectList: [DefectTypeList] {get set}
    var selectedTask: ProjectTask? {get set}
    var projectDetail: ProjectDetail? {get set}
}

class TaskPageInteractor: TaskPageBusinessLogic, TaskPageDataStore
{
    var presenter: TaskPagePresentationLogic?
    var worker: TaskPageWorker?
    var phraseList: [PhraseTypeList] = []
    var defectList: [DefectTypeList] = []
    var selectedTask: ProjectTask?
    var projectDetail: ProjectDetail?
    
    // MARK: Do something
    
    func loadDropDown()
    {
        let response = TaskPage.DropDown.Response(phraseList: phraseList, defectList: defectList)
        presenter?.presentDropDown(response: response)
    }
    
    func addPhrase(phrase: PhraseList) {
        worker = TaskPageWorker()
        worker?.updateTaskPhrase(project: projectDetail!, task: (selectedTask?.name)!, projectPhrase: phrase)
    }
    
    func addDefect(defect: DefectList) {
        worker = TaskPageWorker()
        worker?.updateTaskDefect(project: projectDetail!, task: (selectedTask?.name)!, projectDefect: defect)
    }
    
    func loadPhrase(){
        worker = TaskPageWorker()
        
        worker?.requestPhraseFormFirebase(project: projectDetail!, task: (selectedTask?.name)!, completionHandler: { (phrases) in
            let response = TaskPage.Phrase.Response(phrases: phrases)
            self.presenter?.presentPhrases(response: response)
        })
    }
    
    func loadDefect() {
        worker = TaskPageWorker()
        
        worker?.requestDefectFormFirebase(project: projectDetail!, task: (selectedTask?.name)!, completionHandler: { (defects) in
            let response = TaskPage.Defect.Response(defects: defects)
            self.presenter?.presentDefects(response: response)
        })
    }
    
    func finishingUp(problem: String, improvement: String) {
         worker = TaskPageWorker()
        worker?.finishUpTask(project: projectDetail!, task: (selectedTask?.name)!, problem: problem, improvement: improvement)
    }
}
