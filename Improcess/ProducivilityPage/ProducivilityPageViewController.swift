//
//  ProducivilityPageViewController.swift
//  Improcess
//
//  Created by MuMhu on 17/2/2562 BE.
//  Copyright (c) 2562 Kittitat Boonkarn. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Charts
import Firebase

protocol ProducivilityPageDisplayLogic: class
{
    func displayProducivility(viewModel: ProducivilityPage.Producivility.ViewModel)
}

class ProducivilityPageViewController: UIViewController, ProducivilityPageDisplayLogic
{
    var interactor: ProducivilityPageBusinessLogic?
    var router: (NSObjectProtocol & ProducivilityPageRoutingLogic & ProducivilityPageDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ProducivilityPageInteractor()
        let presenter = ProducivilityPagePresenter()
        let router = ProducivilityPageRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupChart()
        loadData()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var chartView: BarChartView!
    
    func setupChart(){
        chartView.chartDescription?.enabled = false
        
        chartView.highlightPerTapEnabled = false
        chartView.dragEnabled = false
        chartView.setScaleEnabled(true)
        chartView.pinchZoomEnabled = false
        
        // ChartYAxis *leftAxis = chartView.leftAxis;
        
        let xAxis = chartView.xAxis
        xAxis.labelPosition = .bottom
        xAxis.labelFont = .systemFont(ofSize: 10)
        xAxis.granularity = 1
        xAxis.labelCount = 7
//        xAxis.valueFormatter = TaskAxisFormatter()
        
        let leftAxisFormatter = NumberFormatter()
        leftAxisFormatter.minimumFractionDigits = 0
        leftAxisFormatter.maximumFractionDigits = 1
        leftAxisFormatter.negativeSuffix = " Line/Hour"
        leftAxisFormatter.positiveSuffix = " Line/Hour"
        
        let leftAxis = chartView.leftAxis
        leftAxis.labelFont = .systemFont(ofSize: 10)
        leftAxis.labelCount = 8
        leftAxis.valueFormatter = DefaultAxisValueFormatter(formatter: leftAxisFormatter)
        leftAxis.labelPosition = .outsideChart
        leftAxis.spaceTop = 0.15
        leftAxis.axisMinimum = 0
        
        let rightAxis = chartView.rightAxis
        rightAxis.enabled = true
        rightAxis.labelFont = .systemFont(ofSize: 10)
        rightAxis.labelCount = 8
        rightAxis.valueFormatter = leftAxis.valueFormatter
        rightAxis.spaceTop = 0.15
        rightAxis.axisMinimum = 0
        
        let l = chartView.legend
        l.horizontalAlignment = .left
        l.verticalAlignment = .bottom
        l.orientation = .horizontal
        l.drawInside = false
        l.form = .circle
        l.formSize = 9
        l.font = UIFont(name: "HelveticaNeue-Light", size: 11)!
        l.xEntrySpace = 4
    }
    
    func displayProducivility(viewModel: ProducivilityPage.Producivility.ViewModel)
    {
        chartView.noDataText = "Loading"
        var entry = [BarChartDataEntry]()
        
        for i in 0..<viewModel.tasksProducivility.count{
            let temp = BarChartDataEntry(x: Double(i), y: Double(viewModel.tasksProducivility[i].taskProducivility!))
            entry.append(temp)
        }
        
        let dataSet = BarChartDataSet(values: entry, label: "Tasks")
        let data = BarChartData(dataSets: [dataSet])
        chartView.data = data
        dataSet.colors = ChartColorTemplates.colorful()
        
        chartView.notifyDataSetChanged()
    }
    
    func loadData(){
        interactor?.getAllTaskProducivility()
    }
}


public class TaskAxisFormatter: IAxisValueFormatter{
    
    public func stringForValue(_ value: Double, axis: AxisBase?) -> String {
        let taskID = "Task #" + "\(Int(value))"
        return taskID
    }
    
    
}
