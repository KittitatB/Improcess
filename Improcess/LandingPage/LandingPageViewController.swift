//
//  LandingPageViewController.swift
//  Improcess
//
//  Created by MuMhu on 16/10/2561 BE.
//  Copyright (c) 2561 Kittitat Boonkarn. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase

protocol LandingPageDisplayLogic: class
{
    func displayDate(viewModel: LandingPage.Date.ViewModel)
    func displayProjects(viewModel: LandingPage.Project.ViewModel)
}

class LandingPageViewController: UIViewController, LandingPageDisplayLogic, UITableViewDelegate, UITableViewDataSource
{
    var interactor: LandingPageBusinessLogic?
    var router: (NSObjectProtocol & LandingPageRoutingLogic & LandingPageDataPassing)?
    
    @IBOutlet weak var dateLabel: UILabel!
    
    @IBOutlet weak var tableview: UITableView!
    var projects = [ProjectDetail]()
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = LandingPageInteractor()
        let presenter = LandingPagePresenter()
        let router = LandingPageRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.setNavigationBarHidden(true, animated: animated)
        loadProjects()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.navigationController?.setNavigationBarHidden(false, animated: animated)
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        interactor?.getDate()
    }
    
    func displayDate(viewModel: LandingPage.Date.ViewModel)
    {
        dateLabel.text = viewModel.date
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return projects.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "projectCell", for: indexPath) as! ProjectCell
        cell.projectNameLabel.text = projects[indexPath.row].name
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60
    }
    
    func loadProjects(){
        let uid = Auth.auth().currentUser?.uid
        let request = LandingPage.Project.Request(uid: uid)
        interactor?.loadProject(request: request)
    }
    
    func displayProjects(viewModel: LandingPage.Project.ViewModel) {
        projects = viewModel.projectsName!
        tableview.reloadData()
    }
    

}
