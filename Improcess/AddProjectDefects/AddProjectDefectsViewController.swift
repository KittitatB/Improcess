//
//  AddProjectDefectsViewController.swift
//  Improcess
//
//  Created by MuMhu on 25/10/2561 BE.
//  Copyright (c) 2561 Kittitat Boonkarn. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddProjectDefectsDisplayLogic: class
{
    func displaySomething(viewModel: AddProjectDefects.Defects.ViewModel)
}

class AddProjectDefectsViewController: UIViewController, AddProjectDefectsDisplayLogic, UITableViewDelegate, UITableViewDataSource, CellLogic
{
    func addStep(name: String) {
        <#code#>
    }
    
    func showDoneButton() {
        <#code#>
    }
    
    func hideDoneButton() {
        <#code#>
    }
    
    func deleteStep(index: Int) {
        <#code#>
    }
    
    func updateStepDetail(index: Int, newDescription: String) {
        <#code#>
    }
    
    var interactor: AddProjectDefectsBusinessLogic?
    var router: (NSObjectProtocol & AddProjectDefectsRoutingLogic & AddProjectDefectsDataPassing)?
    
    // MARK: Object lifecycle
    
    var data = [AddProjectDefects.Defects.ViewModel]()
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = AddProjectDefectsInteractor()
        let presenter = AddProjectDefectsPresenter()
        let router = AddProjectDefectsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = AddProjectDefects.Defects.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: AddProjectDefects.Defects.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.row == data.count {
            let cell = tableView.dequeueReusableCell(withIdentifier: "addingCell2", for: indexPath) as! AddingCell
            cell.cellInteractor = self
            return cell
        }
        else{
            let cell = tableView.dequeueReusableCell(withIdentifier: "defectCell", for: indexPath) as! StepCell
            cell.stepName.text = data[indexPath.row].name
            cell.stepDescription.text = data[indexPath.row].description
            cell.cellInteractor = self
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 45
    }
    
}
