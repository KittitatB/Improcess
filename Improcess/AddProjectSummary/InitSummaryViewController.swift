//
//  InitSummaryViewController.swift
//  Improcess
//
//  Created by MuMhu on 21/10/2561 BE.
//  Copyright (c) 2561 Kittitat Boonkarn. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol InitSummaryDisplayLogic: class
{
    func displayNewStep()
}

class InitSummaryViewController: UIViewController, InitSummaryDisplayLogic, UITableViewDelegate, UITableViewDataSource, CellLogic, UITextFieldDelegate
{
    
    var interactor: InitSummaryBusinessLogic?
    var router: (NSObjectProtocol & InitSummaryRoutingLogic & InitSummaryDataPassing)?
    var data = [InitSummary.Step.ViewModel]()
    // MARK: Object lifecycle
    
    @IBOutlet weak var tableviewHeight: NSLayoutConstraint!
    @IBOutlet weak var tableview: UITableView!
    let addButton: UIBarButtonItem = UIBarButtonItem(title: "Done", style: UIBarButtonItem.Style.plain, target: self, action: #selector(buttonTapped))
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = InitSummaryInteractor()
        let presenter = InitSummaryPresenter()
        let router = InitSummaryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tableviewHeight.constant = CGFloat((data.count + 1) * 45)
        self.hideKeyboardWhenTappedAround()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    
    func displayNewStep()
    {
        tableviewHeight.constant = CGFloat((data.count + 1) * 45)
        tableview.reloadData()
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return data.count + 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if indexPath.row == data.count {
            let cell = tableView.dequeueReusableCell(withIdentifier: "addingCell", for: indexPath) as! AddingCell
            cell.cellInteractor = self
            cell.addStepTextField.delegate = self
            return cell
        }
        else{
            let cell = tableView.dequeueReusableCell(withIdentifier: "stepcell", for: indexPath) as! StepCell
            cell.stepName.text = data[indexPath.row].name
            cell.stepName.delegate = self
            cell.stepDescription.text = data[indexPath.row].description
            cell.stepDescription.delegate = self
            cell.cellInteractor = self
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 45
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
    
    func addStep(name: String) {
        let newStep = InitSummary.Step.ViewModel(myName: name, myIndex: data.count)
        data.append(newStep)
        displayNewStep()
    }
    
    func showDoneButton() {
        self.navigationItem.rightBarButtonItem = addButton
    }
    
    @objc func buttonTapped(){
       view.endEditing(true)
    }
    
    func hideDoneButton(){
        self.navigationItem.rightBarButtonItem = nil
    }
    
    func deleteStep(index: Int){
        data.remove(at: index)
        displayNewStep()
    }
    
    func updateStepDetail(index: Int, newDescription: String){
        data[index].description = newDescription
    }
    
    @IBAction func handleNext(_ sender: Any) {
        if data.count == 0{
            let alert = UIAlertController(title: "Error", message: "Project must have at least one step!", preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            self.present(alert, animated: true, completion: nil)
            return
        }
        
        for i in 0..<data.count{
            let add = AddSteps(name: data[i].name, description: data[i].description, index: i)
            interactor?.steps.append(add)
        }
        router?.routeToAddProjectDefects(segue: nil)
    }
}
