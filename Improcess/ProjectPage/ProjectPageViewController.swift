//
//  ProjectPageViewController.swift
//  Improcess
//
//  Created by MuMhu on 30/10/2561 BE.
//  Copyright (c) 2561 Kittitat Boonkarn. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProjectPageDisplayLogic: class
{
    func displayProject(viewModel: ProjectPage.Project.ViewModel)
    func displayTask(viewModel: ProjectPage.Task.ViewModel)
    func passingPhraseList(list: [PhraseTypeList])
    func passingDefectList(list: [DefectTypeList])
    func displayProducivility(viewModel: ProducivilityPage.Producivility.ViewModel)
}

class ProjectPageViewController: UIViewController, ProjectPageDisplayLogic, UITableViewDataSource, UITableViewDelegate, CreateTaskLogic
{
    
    var interactor: ProjectPageBusinessLogic?
    var router: (NSObjectProtocol & ProjectPageRoutingLogic & ProjectPageDataPassing)?
    var projectTask = [ProjectTask]()
    var cellStack: Int?
    var statusColor:[String:UIColor] = ["Open":UIColor.init(red: 76/255, green: 217/255, blue: 100/255, alpha: 1),"WIP":UIColor.init(red: 255/255, green: 204/255, blue: 0/255, alpha: 1),"Close":UIColor.init(red: 255/255, green: 59/255, blue: 48/255, alpha: 1)]
    //    let addButton: UIBarButtonItem = UIBarButtonItem(title: "Done", style: UIBarButtonItem.Style.plain, target: self, action: #selector(buttonTapped))
    var seeAll: Bool?
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ProjectPageInteractor()
        let presenter = ProjectPagePresenter()
        let router = ProjectPageRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        loadData()
        self.hideKeyboardWhenTappedAround()
        super.viewDidLoad()
        seeAll = false
        self.title = interactor?.project?.name
    }
    
    override func viewWillAppear(_ animated: Bool) {
        loadTask()
        view.setNeedsLayout()
    }
    
    override func viewDidLayoutSubviews() {
        if(seeAll!){
            seeAllButton.setTitle("Hide tasks", for: .normal)
        }else{
            seeAllButton.setTitle("Show all tasks", for: .normal)
        }
        var viewHeight = 640
        projectTask.sort{$0.timestamp > $1.timestamp}
        updateTableview()
        if (projectTask.count) > 2{
            if(seeAll!){
                viewHeight += (projectTask.count - 2) * 75
            }else{
                viewHeight += 75
            }
        }
        
        UIView.animate(withDuration: 0.25, animations: {
            self.view.layoutIfNeeded()
            self.scrollview.layoutIfNeeded()
            self.scrollview.contentSize = CGSize(width: self.view.frame.width, height: CGFloat(viewHeight))
        })
        
    }
    
    // MARK: Do something
    
    @IBOutlet weak var tableview: UITableView!
    @IBOutlet weak var tableviewHeight: NSLayoutConstraint!
    @IBOutlet weak var scrollview: UIScrollView!
    @IBOutlet weak var seeAllButton: UIButton!
    
    var totalTime: Float = 0.0
    var totalLine: Float = 0.0
    var product: Float = 0.0
    
    func loadTask(){
        projectTask.removeAll()
        interactor?.requestTasks()
    }
    
    func displayTask(viewModel: ProjectPage.Task.ViewModel) {
        
        for task in viewModel.task{
            projectTask.append(task)
        }
        projectTask.sort{$0.timestamp > $1.timestamp}
        updateTableview()
        let secondTab = self.tabBarController?.viewControllers![1] as! ChartsViewController
        secondTab.interactor?.projectDetail = self.interactor?.project
        secondTab.interactor?.tasks = self.projectTask
    }
    
    func displayProject(viewModel: ProjectPage.Project.ViewModel)
    {
        self.tabBarController?.title = viewModel.project.name
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 75
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return projectTask.count + 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if seeAll! == false && indexPath.row == 3{
            let cell = tableView.dequeueReusableCell(withIdentifier: "addingCell3", for: indexPath) as! CreateTaskCell
            cell.cellInteractor = self
            return cell
        }else{
            if indexPath.row == projectTask.count {
                let cell = tableView.dequeueReusableCell(withIdentifier: "addingCell3", for: indexPath) as! CreateTaskCell
                cell.cellInteractor = self
                return cell
            }
            else {
                let cell = tableView.dequeueReusableCell(withIdentifier: "taskCell", for: indexPath) as! TaskCell
                cell.taskNameLabel.text = projectTask[indexPath.row].name
                cell.status.text = projectTask[indexPath.row].status
                cell.status.textColor = statusColor[projectTask[indexPath.row].status]
                return cell
            }
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if(indexPath.row < projectTask.count){
            interactor?.selectedTask = projectTask[indexPath.row]
            router?.routeToTaskPage(segue: nil)
        }
    }
    
    func loadData(){
        let queue = DispatchQueue(label: "worker-queue")
    
        queue.async {
            self.interactor?.requestPhraseList()
            self.interactor?.requestDefectList()
        }
        
        DispatchQueue.main.async {
            self.interactor?.receiveProject()
            self.updateTableview()
        }
        
    }
    
    func updateTableview(){
        tableviewHeight.constant = CGFloat((projectTask.count + 1) * 75)
        if(projectTask.count > 3){
            if(seeAll! == false){
                tableviewHeight.constant = CGFloat((4) * 75)
            }
        }
        tableview.reloadData()
    }
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        textField.resignFirstResponder()
        return true
    }
    
    func createTask() {
        let alert = UIAlertController(title: "Create Task", message: "Please Input Task Name!", preferredStyle: UIAlertController.Style.alert)
        let done = UIAlertAction(title: "Done", style: .default) { (alertAction) in
            let textField = alert.textFields![0] as UITextField
            if textField.text != "" {
                let taskName = textField.text!
                let newTask = ProjectTask(myName: taskName, myStatus: "Open", myTimestamp: Int(NSDate().timeIntervalSince1970))
                self.projectTask.append(newTask)
                let work_queue = DispatchQueue(label: "work-queue")
                work_queue.async {
                    self.interactor?.addTask(task: taskName, numberOfTask: self.projectTask.count)
                }
                DispatchQueue.main.async {
                    self.view.setNeedsLayout()
                }
            }
        }
        alert.addTextField { (textField) in
            textField.placeholder = "Enter task name"
        }
        alert.addAction(done)
        let cancel = UIAlertAction(title: "Cancel", style: .cancel) { (alertAction) in }
        alert.addAction(cancel)
        self.present(alert, animated:true, completion: nil)
    }
    
    func passingPhraseList(list: [PhraseTypeList]) {
        let thridTab = self.tabBarController?.viewControllers![2] as! DashboardViewController
        thridTab.phraseList = list
    }
    
    func passingDefectList(list: [DefectTypeList]){
        let thridTab = self.tabBarController?.viewControllers![2] as! DashboardViewController
        thridTab.defectList = list
        thridTab.textDescrip = (interactor?.project!.detail!)!
    }
    
    func displayProducivility(viewModel: ProducivilityPage.Producivility.ViewModel)
    {
        updateDetail(tasks: viewModel.tasksProducivility)
    }
    
    func updateDetail(tasks: [TaskProducivility]){
        
        for task in tasks{
            totalTime += task.time!
            totalLine += task.line!
        }
        product = totalLine/totalTime
        interactor?.product = self.product
    }
    
    @IBAction func seeAllDidPressed(_ sender: Any) {
        seeAll = !seeAll!
        view.setNeedsLayout()
    }
    
}
